using System;
using System.IO;
using System.Reflection;
using System.Text;

namespace Primitively;

internal readonly struct EmbeddedResources
{
    private static readonly Assembly _thisAssembly = typeof(EmbeddedResources).Assembly;

    internal static readonly string AutoGeneratedHeader = GetEmbeddedResource(nameof(AutoGeneratedHeader));
    internal static readonly string JsonConverterAttribute = GetEmbeddedResource(nameof(JsonConverterAttribute));
    internal static readonly string PrimitiveFactory = GetEmbeddedResource(nameof(PrimitiveFactory));
    internal static readonly string PrimitiveRepository = GetEmbeddedResource(nameof(PrimitiveRepository));
    internal static readonly string TypeConverterAttribute = GetEmbeddedResource(nameof(TypeConverterAttribute));
    internal static readonly string ValidateMethod = GetEmbeddedResource(nameof(ValidateMethod));

    internal readonly struct DateOnly
    {
        internal static readonly string Base = GetEmbeddedResource(nameof(DateOnly), nameof(Base));
        internal static readonly string JsonConverter = GetEmbeddedResource(nameof(DateOnly), nameof(JsonConverter));
        internal static readonly string TypeConverter = GetEmbeddedResource(nameof(DateOnly), nameof(TypeConverter));
    }

    internal readonly struct Guid
    {
        internal static readonly string Base = GetEmbeddedResource(nameof(Guid), nameof(Base));
        internal static readonly string JsonConverter = GetEmbeddedResource(nameof(Guid), nameof(JsonConverter));
        internal static readonly string TypeConverter = GetEmbeddedResource(nameof(Guid), nameof(TypeConverter));
    }

    internal readonly struct Integer
    {
        internal static readonly string Base = GetEmbeddedResource(nameof(Integer), nameof(Base));
        internal static readonly string JsonConverter = GetEmbeddedResource(nameof(Integer), nameof(JsonConverter));
        internal static readonly string TypeConverter = GetEmbeddedResource(nameof(Integer), nameof(TypeConverter));
    }

    internal readonly struct String
    {
        internal static readonly string Base = GetEmbeddedResource(nameof(String), nameof(Base));
        internal static readonly string DefaultPartialMethods = GetEmbeddedResource(nameof(String), nameof(DefaultPartialMethods));
        internal static readonly string JsonConverter = GetEmbeddedResource(nameof(String), nameof(JsonConverter));
        internal static readonly string TypeConverter = GetEmbeddedResource(nameof(String), nameof(TypeConverter));
    }

    private static string GetEmbeddedResource(params string[] names)
    {
        var resourceFullName = $"{nameof(Primitively)}.{nameof(EmbeddedResources)}.{string.Join(".", names)}.cs";
        var resourceStream = _thisAssembly.GetManifestResourceStream(resourceFullName);

        if (resourceStream is null)
        {
            var existingResources = _thisAssembly.GetManifestResourceNames();

            throw new ArgumentException($"Could not find embedded resource '{resourceFullName}'. Available names: {string.Join(", ", existingResources)}");
        }

        using var reader = new StreamReader(resourceStream, Encoding.UTF8);

        return reader.ReadToEnd();
    }
}
