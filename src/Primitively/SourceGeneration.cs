using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Primitively;

/// <inheritdoc />
[Generator]
public class SourceGeneration : IIncrementalGenerator
{
    private const string EmbedAbstractionsSymbol = "EMBED_PRIMITIVELY_ABSTRACTIONS";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // Register the abstractions sources
        context.RegisterPostInitializationOutput(ctx => GenerateAbstractionFiles(ctx));

        // Register the record struct and factory class sources
        var source = GetTargetSyntax(context);
        context.RegisterSourceOutput(source, (ctx, src) =>
        {
            if (src.RecordStructs.IsDefaultOrEmpty)
            {
                return;
            }

            // Parse the C# and collect all the partial record structs decorated with a Primitively attribute
            var recordStructs = Parser.GetRecordStructDataToGenerate(ctx, src.Compilation, src.RecordStructs);
            if (!recordStructs.Any())
            {
                return;
            }

            // Create a c# file for each struct
            GenerateRecordStructFiles(ctx, recordStructs);

            // Create a c# file for a factory class
            GenerateFactoryFile(ctx, recordStructs, src.Compilation);
        });
    }

    private static IncrementalValueProvider<(Compilation Compilation, ImmutableArray<RecordDeclarationSyntax> RecordStructs)> GetTargetSyntax(IncrementalGeneratorInitializationContext context)
    {
        // Create SyntaxProvider which sniffs out Record Structs decorated with a Primitively attribute
        IncrementalValuesProvider<RecordDeclarationSyntax> recordDeclarationSyntaxProvider = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (node, _) => Parser.IsRecordStructTargetForGeneration(node),
                transform: static (context, cancellationToken) => Parser.GetRecordStructSemanticTargetForGeneration(context, cancellationToken))
            .Where(static m => m is not null)!;

        var targets = recordDeclarationSyntaxProvider.Collect();
        var compilationAndValues = context.CompilationProvider.Combine(targets);

        return compilationAndValues;
    }

    private static void GenerateAbstractionFiles(IncrementalGeneratorPostInitializationContext context)
    {
        var sb = new StringBuilder();

        foreach (var resource in EmbeddedResources.Abstractions.GetEmbeddedResources())
        {
            sb.Clear();
            sb.Append(EmbeddedResources.AutoGeneratedHeader);
            sb.AppendLine();
            sb.AppendLine($"#if {EmbedAbstractionsSymbol}");
            sb.AppendLine();
            sb.Append(resource.Value);
            sb.AppendLine();
            sb.AppendLine("#endif");

            var sourceText = SourceText.From(sb.ToString(), Encoding.UTF8);
            context.AddSource($"{resource.Key}.g.cs", sourceText);
        }
    }

    private static void GenerateRecordStructFiles(SourceProductionContext context, List<RecordStructData> recordStructs)
    {
        var sb = new StringBuilder();

        foreach (var recordStruct in recordStructs)
        {
            sb.Clear();
            sb.Append(EmbeddedResources.AutoGeneratedHeader);
            sb.AppendLine();
            sb.AppendLine($"namespace {recordStruct.NameSpace};");
            sb.AppendLine();
            sb.Append(EmbeddedResources.JsonConverterAttribute);
            sb.Append(EmbeddedResources.TypeConverterAttribute);

            switch (recordStruct.DataType)
            {
                case DataType.DateOnly:
                    sb.Append(EmbeddedResources.DateOnly.Base);
                    sb.Append(EmbeddedResources.DateOnly.JsonConverter);
                    sb.Append(EmbeddedResources.DateOnly.TypeConverter);
                    break;
                case DataType.Guid:
                    sb.Append(EmbeddedResources.Guid.Base);
                    sb.Append(EmbeddedResources.Guid.JsonConverter);
                    sb.Append(EmbeddedResources.Guid.TypeConverter);
                    break;
                case DataType.String:
                    sb.Append(EmbeddedResources.String.Base);
                    sb.Append(EmbeddedResources.String.DefaultPartialMethods);
                    sb.Append(EmbeddedResources.String.JsonConverter);
                    sb.Append(EmbeddedResources.String.TypeConverter);
                    break;
                default:
                    throw new NotSupportedException($"{recordStruct.DataType} is not supported");
            }

            // Add Validate Method
            sb.Append(EmbeddedResources.ValidateMethod);

            // Add closing brace
            sb.AppendLine("}");

            // Replace variable names with values
            sb.Replace("PRIMITIVE_TYPE", recordStruct.Name);
            sb.Replace("PRIMITIVE_PATTERN", recordStruct.Pattern);
            sb.Replace("PRIMITIVE_EXAMPLE", recordStruct.Example);
            sb.Replace("PRIMITIVE_FORMAT", recordStruct.Format);
            sb.Replace("PRIMITIVE_LENGTH", recordStruct.Length.ToString());
            sb.Replace("PRIMITIVE_MINLENGTH", recordStruct.MinLength.ToString());
            sb.Replace("PRIMITIVE_MAXLENGTH", recordStruct.MaxLength.ToString());

            // Construct source file text from string
            context.AddSource($"{recordStruct.Name}.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
        }
    }

    private static void GenerateFactoryFile(SourceProductionContext context, List<RecordStructData> recordStructs, Compilation compilation)
    {
        // Create a c# file for a factory class
        var sb = new StringBuilder();
        sb.Append(EmbeddedResources.AutoGeneratedHeader);
        sb.AppendLine();
        sb.AppendLine($"namespace {compilation.AssemblyName};"); // TODO: Get Root Namespace from the Compilation class
        sb.AppendLine();
        sb.Append(EmbeddedResources.PrimitiveFactory);

        var padding = "        ";
        var dataTypes = recordStructs.Select(rs => rs.DataType).Distinct();
        var caseStatements = new List<string>();

        // Generate a list of switch case statements
        foreach (var dataType in dataTypes)
        {
            var items = recordStructs
                .Where(rs => rs.DataType == dataType)
                .OrderBy(rs => rs.Name)
                .Select(type => $"{padding}nameof ({type.Name}) => ({type.Name})value,");

            caseStatements.Add($"{padding}// {dataType}");
            caseStatements.AddRange(items);
        }

        // Replace variable names with values
        sb.Replace("PRIMITIVE_FACTORY_CASE_STATEMENTS", string.Join(Environment.NewLine, caseStatements));

        // Construct source file text from string
        context.AddSource("PrimitiveFactory.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
    }
}
