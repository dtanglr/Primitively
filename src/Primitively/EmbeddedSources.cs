using System;
using System.IO;
using System.Reflection;
using System.Text;

namespace Primitively;

internal static class EmbeddedSources
{
    private static readonly Assembly _thisAssembly = typeof(EmbeddedSources).Assembly;
    private static readonly string _autoGeneratedHeader = LoadEmbeddedResource("Primitively.Templates.AutoGeneratedHeader.cs");

    internal static readonly string EncapsulatedPrimitiveAttributeSource = LoadTemplateForEmitting("EncapsulatedPrimitiveAttribute");
    internal static readonly string IPrimitiveSource = LoadTemplateForEmitting("IPrimitive");

    internal static readonly ResourceCollection GuidResources = new(
        _autoGeneratedHeader,
        LoadEmbeddedResource("Primitively.Templates.Guid.Guid_Base.cs"),
        LoadEmbeddedResource("Primitively.Templates.Guid.Guid_SystemTextJsonConverter.cs"),
        LoadEmbeddedResource("Primitively.Templates.Guid.Guid_TypeConverter.cs"),
        false
    );

    internal const string SystemTextJsonAttributeSource = "    [System.Text.Json.Serialization.JsonConverter(typeof(ENCAPSULATED_PRIMITIVE_TYPESystemTextJsonConverter))]";
    internal const string TypeConverterAttributeSource = "    [System.ComponentModel.TypeConverter(typeof(ENCAPSULATED_PRIMITIVE_TYPETypeConverter))]";

    internal static string LoadEmbeddedResource(string resourceName)
    {
        var resourceStream = _thisAssembly.GetManifestResourceStream(resourceName);

        if (resourceStream is null)
        {
            var existingResources = _thisAssembly.GetManifestResourceNames();

            throw new ArgumentException($"Could not find embedded resource {resourceName}. Available names: {string.Join(", ", existingResources)}");
        }

        using var reader = new StreamReader(resourceStream, Encoding.UTF8);

        return reader.ReadToEnd();
    }

    internal static string LoadTemplateForEmitting(string resourceName)
    {
        var resource = LoadEmbeddedResource($"Primitively.Templates.Sources.{resourceName}.cs");

        return _autoGeneratedHeader + @"#if PRIMITIVELY_EMBED_ATTRIBUTES

" + resource
                   .Replace("public sealed", "internal sealed")
                   .Replace("public enum", "internal enum")
               + @"
#endif";
    }

    public readonly struct ResourceCollection
    {
        public string Header { get; }
        public string BaseId { get; }
        public string SystemTextJson { get; }
        public string TypeConverter { get; }
        public bool NullableEnable { get; }

        public ResourceCollection(
            string header,
            string baseId,
            string systemTextJson,
            string typeConverter,
            bool nullableEnable)
        {
            Header = header;
            BaseId = baseId;
            SystemTextJson = systemTextJson;
            TypeConverter = typeConverter;
            NullableEnable = nullableEnable;
        }
    }
}
